tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs Apache nifi.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.5m1/types.yaml
  #- types/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
  #- types/plugin.yaml
  - types/nifi.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  ip_vm_1: 
      description: >
        The ip of the first Virtual Machine to use

  ip_vm_2: 
      description: >
        The ip of the second Virtual Machine to use

  NCM_GUI_port: 
      description: >
        The port at which Apache nifi GUI will be reachable

  path: 
      description: >
        Path to access to the GUI

  agent_user:
    description: >
      User name used when SSH-ing into the started machine

  agent_private_key_path:
    description: >
      Path to a private key that resided on the management machine.
      SSH-ing into agent machines will be done with this key.

  nifi_version:
    description: >
      Nifi version to install

node_templates:

  nifincm:
    type: nodecellar.nodes.NifiNCM
    interfaces:
      cloudify.interfaces.cloudify_agent:
        create:
          inputs:
            agent_config:
              user: { get_input: agent_user }
              key: { get_input: agent_private_key_path }
    properties:
      ip: { get_input: ip_vm_1 }
      NCM_GUI_port: { get_input: NCM_GUI_port }
      path: { get_input: path }
      nifi_version: { get_input: nifi_version }
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM1
      - type: cloudify.relationships.connected_to
        target: nifislave1
      - type: cloudify.relationships.connected_to
        target: nifislave2

  nifislave1:
    type: nodecellar.nodes.NifiSlave
    interfaces:
      cloudify.interfaces.cloudify_agent:
        create:
          inputs:
            agent_config:
              user: { get_input: agent_user }
              key: { get_input: agent_private_key_path }
    properties:
      ip: { get_input: ip_vm_1 }
      nifi_version: { get_input: nifi_version }
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM1

  nifislave2:
    type: nodecellar.nodes.NifiSlave
    interfaces:
      cloudify.interfaces.cloudify_agent:
        create:
          inputs:
            agent_config:
              user: { get_input: agent_user }
              key: { get_input: agent_private_key_path }
    properties:
      ip: { get_input: ip_vm_2 }
      nifi_version: { get_input: nifi_version }
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM2

  VM1:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: ip_vm_1 }
      agent_config:
        user: { get_input: agent_user }
        key: { get_input: agent_private_key_path }

  VM2:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: ip_vm_2 }
      agent_config:
        user: { get_input: agent_user }
        key: { get_input: agent_private_key_path }

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Apache nifi GUI
    value:
      nifi_gui_endpoint: { concat: ['http://',
                                    { get_attribute: [nifincm, ip] },
                                    ':',
                                    { get_property: [nifincm, NCM_GUI_port] },
                                    { get_property: [nifincm, path] }] }
